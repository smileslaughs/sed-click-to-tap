// Generated by CoffeeScript 1.7.1
(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $.fn.extend({
    clicktotap: function(options) {
      var settings;
      settings = {
        clickText: "click",
        touchText: "tap",
        ignoreFlag: "sctignore"
      };
      settings = $.extend(settings, options);
      return this.each(function() {
        var changed, el, element, fixers, i, originals, supportsTouch, _i, _j, _len, _len1, _results;
        this.switchText = function(el, find, replace) {
          var re, textContent;
          textContent = el.innerHTML;
          re = new RegExp(find, "gi");
          if (textContent.match(re)) {
            textContent = textContent.replace(re, replace);
            return el.innerHTML = textContent;
          }
        };
        element = this;
        supportsTouch = __indexOf.call(window, 'ontouchstart') >= 0 || navigator.msMaxTouchPoints;
        fixers = [];
        originals = this.querySelectorAll('[data-' + settings.ignoreFlag + ']');
        for (_i = 0, _len = originals.length; _i < _len; _i++) {
          el = originals[_i];
          fixers.push(el.innerHTML);
        }
        if (supportsTouch) {
          this.switchText(element, settings.clickText, settings.touchText);
        } else {
          this.switchText(element, settings.touchText, settings.clickText);
        }
        changed = this.querySelectorAll('[data-' + settings.ignoreFlag + ']');
        _results = [];
        for (i = _j = 0, _len1 = changed.length; _j < _len1; i = ++_j) {
          el = changed[i];
          _results.push(el.innerHTML = fixers[i]);
        }
        return _results;
      });
    }
  });

}).call(this);
